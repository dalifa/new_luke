// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
//
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// 
//
model User{
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  hashedEmail       String?
  //
  accounts          Account[]
  //
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}
// selon Auth.JS site officiel au 03/01/2024
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  //
  @@unique([provider, providerAccountId])
}
//
//
model Profile {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  isActiveAccount      Boolean  @default(true)
  role                 String   @default("USER")
  codepin              Int      @unique @default(1000)
  userId               String?
  //
  given                Int      @default(0) 
  received             Int      @default(0)
  // lorsqu'il choisira son pays, on lui mettra ici son currency correspondant
  currency             String   @default("not informed")
  googleImage          String? 
  encryptedEmail       String?
  hashedEmail          String?
  username             String   @default("pseudo")
  encryptedPhone       String?  
  hashedPhone          String?  // pour vérification 
  firstname            String   @default("prénom")
  encryptedLastname    String   @default("nom") 
  city                 String   @default("ville") 
  country              String   @default("pays")
  bio                  String   @default("présentez-vous") 
  //  
  // Relations
  canBeBlessed          CanBeBlessed[]
  potentialRecipients   MyPotentialRecipient[]
  donationsMade         MyListToBless[] @relation("donations")
  donationsReceived     MyListToBless[] @relation("receivedDonations")
  metProfiles           AlreadyMet[]  @relation("metProfiles")
  metByProfiles         AlreadyMet[]  @relation("metByProfiles")
  subscriptions         Subscription[]
  questions             QuestionResponse[]
  //
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
//
model QuestionResponse {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId        String   @db.ObjectId
  profile          Profile  @relation(fields: [profileId], references: [id])
  question1        Boolean  @default(false)
  question2        Boolean  @default(false)
  question3        Boolean  @default(false)
  question4        Boolean  @default(false)
  question5        Boolean  @default(false)
  //
  createdAt            DateTime @default(now())
}
//
model CanBeBlessed {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId        String   @db.ObjectId
  profile          Profile  @relation(fields: [profileId], references: [id])
  amountId         String   @db.ObjectId
  amount           Amount   @relation(fields: [amountId], references: [id])
  currency         String   @default("not")
  nbrOfDisplays    Int      @default(0)   
  canBeDisplayed   Boolean  @default(false)
  maxDisplays      Int      @default(1)
  //
  @@index([canBeDisplayed, nbrOfDisplays])
}
//
//
model MyListToBless {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  ownId                  Int?
  donorId                String     @db.ObjectId
  donor                  Profile    @relation("donations", fields: [donorId], references: [id])
  chosenRecipient        String?    @db.ObjectId
  recipient              Profile?   @relation("receivedDonations", fields: [chosenRecipient], references: [id])
  isRecipientChosen      Boolean    @default(false)
  recipientChosenAt      DateTime?
  amountId               String 
  amount                 Int       
  donationNumber         Int?       
  donatorValidation      Boolean    @default(false)
  recipientValidation    Boolean    @default(false)
  donorConfirmedAt       DateTime?
  recipientConfirmedAt   DateTime?
  createdAt              DateTime   @default(now())
  //
  potentialRecipients    MyPotentialRecipient[]
  //
  @@index([donorId, chosenRecipient])
}
//
//
model MyPotentialRecipient {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  listToBlessId          String        @db.ObjectId
  list                   MyListToBless @relation(fields: [listToBlessId], references: [id])
  amount                 Int // pour l'afficher dans le dialog
  potentialRecipientId   String        @db.ObjectId
  recipient              Profile       @relation(fields: [potentialRecipientId], references: [id])
  isRecipientChosen      Boolean       @default(false)  // false  =  le recipient n'est pas encore choisi
  //
  createdAt              DateTime      @default(now())
}
//
//
model AlreadyMet {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId         String   @db.ObjectId
  profile          Profile  @relation("metProfiles", fields: [profileId], references: [id])
  profileMetId     String   @db.ObjectId
  profileMet       Profile  @relation("metByProfiles", fields: [profileMetId], references: [id])    
  @@unique([profileId, profileMetId]) // Un utilisateur ne peut rencontrer un autre qu'une seule fois
  //
  createdAt       DateTime @default(now())
}
//
//
model Activity {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  author         Json?
  activity       Json?
  createdAt      DateTime @default(now())
}
//
model Amount {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int     @default(1)
  currency   String  @default("nothing")
  rank       String  @default("nothing")
  //
  canBeBlessed   CanBeBlessed[]
}
//
model Country {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  currency         String
  usezone          String 
}
//
// taux de commission en %npx prisma generate
model CommissionRate {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  rate           Int     @default(1)
  //
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}
// ####  
// TRÈS IMPORTANT
model Metric {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  // maximum de personnes dans la liste
  maxDisplays          Int  @default(1)
  //
}
//
//
model Subscription {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId      String   @db.ObjectId
  profile        Profile  @relation(fields: [profileId], references: [id])
  codepin        Int
  email          String?
  canParticipate Boolean    @default(false) // peut donner et recevoir
  remainingDays  Int        @default(0)
  startsTo       DateTime   @updatedAt // debut de l'abonnement
  endsAt         DateTime?  // Fin réelle de l'abonnement
  //
  createdAt      DateTime   @default(now())
}