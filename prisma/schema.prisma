// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
//

model User{
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  //
  accounts       Account[]
  //
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}
// selon Auth.JS site officiel au 03/01/2024
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
}
//
// code de parrainage
model referralCode{
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  // godFather = parrain godMother = marraine
  godFatherEmail   String?
  godFatherCodepin Int      
  // godSon = filleul godDaughter = filleule
  godSonEmail      String?
  godSonPhone      Int
  secretCode       String
  isUsed           Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
//
model Profile {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  googleEmail          String?
  googleImage          String?   
  usercodepin          Int      @unique @default(1000)
  credit               Int      @default(0)
  jackpot              Int      @default(0)
  jackpotCents         Int      @default(0) // en cents x 100
  //
  username             String 
  phone                String   @unique
  firstname            String    
  lastname             String    
  city                 String    
  countryId            String   @db.ObjectId
  country              Country? @relation(fields: [countryId], references: [id], onDelete: Cascade)    
  bio                  String    
  // lorsqu'il choisira son pays, on lui mettra ici son currency correspondant
  currency             String   @default("nothing")
  // total de ddc donné
  ddcGiven             Int      @default(0)
  ddcReceived          Int      @default(0)
  // 
  //
  role                 UserRole @default(USER)
  isPartner            Boolean  @default(false)
  // le maximum qu'il peut recevoir des user approvisionnant leur compte
  maxPartnerCredit     Int      @default(0)
  // ce qu'il peut actuellement encaisser des user
  partnerCredit        Int      @default(0)
  // ce que le partenaire peut remettre à un user qui recupère sa cagnotte
  partnerCreditToRemit Int      @default(0)
  //
  validatorId          String   @default("aucun")
  isActiveAccount      Boolean  @default(true)
  //
  collectionParticipants    CollectionParticipant[]
  profilesMets              ProfilesMet[]  @relation("profilesMet")
  profilesOf                ProfilesMet[]  @relation("metProfiles")
  //
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
//
enum UserRole {
  ADMIN
  USER
}
// la collecte
model Collection {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  amount             Int
  currency           String     @default("€")
  collectionType     String     @default("totality")
  group              Int        @default(1)
  groupStatus        Int        @default(0)
  isGroupComplete    Boolean    @default(false)
  // la collecte est cloturé ?
  isCollectionClosed Boolean    @default(false)
  // les combien de don ont été déjà fait. s'ils sont === à group ont met isCollectionClosed à true
  donationCollected  Int        @default(0)
  // les participants
  collectionParticipants         CollectionParticipant[]
  //
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}
// ceux qui participe a la collecte
model CollectionParticipant {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  // id de la collecte soit tripl, snippets, totality ou ddc
  collectionId       String      @db.ObjectId
  collection         Collection  @relation(fields: [collectionId], references: [id])
  // celui à qui on peut donner
  profileId          String      @db.ObjectId
  profile            Profile     @relation(fields: [profileId], references: [id])
  // son rang parmi le participants à cette collecte
  rank               Int
  // le projet qu'il souhaite faire financer
  project            String      @default("Non renseigné") 
  // a renoncé à recevoir
  isOnlyDonator      Boolean     @default(false)
  // si lui même a donné (uniquement pour tripl, snippets, totality)
  hasGive            Boolean     @default(false) // le participant a t-il donné ?
  //
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  //
  @@unique([collectionId, profileId]) // pour que cette paire (collectionId et profileId ne soit enregistrée qu'une seule fois)
}
//
model CollectionResult {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  // email du donateur
  donatorEmail       String?
  donatorProfileId   String?
  // id de la collecte
  collectionId       String?
  // montant à donner dans la collecte
  amount             Int?
  // la monnaie concerné de la collecte
  currency           String @default("nothing")
  // le type de collecte
  collectionType     String @default("")
  //
  recipientEmail     String?
  recipientProfileId String?
  //number of donations received = concerne toujours le recipient
  donationReceived   Int  @default(0)
  //
  createdAt          DateTime @default(now())
}
// les profiles met
model ProfilesMet {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  profileId           String  @db.ObjectId
  profile             Profile @relation("profilesMet", fields: [profileId], references: [id])
  // 4 test
  profilecodepin      Int
  participantMetId    String  @db.ObjectId
  participantMet      Profile @relation("metProfiles", fields: [participantMetId], references: [id])
  // 4 test
  participantcodepin  Int     
  @@unique([profileId, participantMetId])
}
//
model TransferDemand {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String?
  usercodepin        Int      @default(1000)
  amountToTransfer   Int
  currency           String   @default("nothing")  
  transferCode       Int      @default(0)
  isUsed             Boolean  @default(false) 
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
//
model Activity {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  author         Json?
  activity       Json?
  createdAt      DateTime @default(now())
}
//
model Amount {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  amount     Int     @default(1)
  currency   String  @default("nothing")
  rank       String  @default("nothing")
  //
}
//
model Country {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  currency         String
  usezone          String 
  profile          Profile[]
}
// Enregistrer ici les commissions que touche l'e/se
model Commission {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userEmail         String?
  usercodepin       Int
  transferCode      Int?
  userJackpot       Int?
  amountToTransfer  Int?
  commission        Int?    @default(0)
  // cents x 100
  commissionCents   Int     @default(0)
  currency          String  @default("nothing")
  origin            String? 
  //
  createdAt      DateTime   @default(now())
}
// taux de commission en %npx prisma generate
model CommissionRate {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  rate           Int     @default(1)
  //
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}
//
model Cents {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  // ex: 0,57
  amount         String
  // 5
  cent1          Int     @default(0)
  // 7
  cent2          Int     @default(0)
  // multiplié par 100 = 0,57 x 100 = 57
  byten          Int
}
// ####  
// TRÈS IMPORTANT
model Metric {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  currentgroup         Int  @default(3)
  currentNbrOfTripl    Int  @default(1)
  nextOwnIdToEnter     Int  @default(1)
  //
  cgt                  Int  @default(3) // Current Group Totality
  noit                 Int  @default(2) // Next Own Id Totality
  noot                 Int  @default(1) // Number Of Open Totality
  //
  cgs                  Int  @default(3) // Current Group Snippets
  nois                 Int  @default(1) // Next Own Id Snippets
  noos                 Int  @default(1) // Number Of Open Snippets
  // Direct donation challenge
  currentDdcGroup      Int  @default(1)
  // total of ddc on site
  totalDdcGiven        Int  @default(0)
}
// Only For Tests
model CurrentProfileForTest {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  profileTestId        String?
  usercodepin          Int
  lastProfile          Int?
}
//